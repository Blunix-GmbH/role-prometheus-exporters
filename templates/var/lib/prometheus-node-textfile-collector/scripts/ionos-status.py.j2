#!/usr/bin/env python3
#
# Parse https://status.ionos.cloud/ and export components status for prometheus monitoring
#
# requirements:
#   - apt install python3-pip
#   - pip3 install beautifulsoup4
#   - pip3 install urllib3


# import libraries
import urllib3
from bs4 import BeautifulSoup


# main main_components described in the status page
main_components = ["cloud_support", "location_", "apis_and_frontends", "global_services"]
# possible sub_components of each main components status
sub_components = ["compute", "storage", "network", "managed_kubernetes", "supporting_services", "data_center_designer", "cloud_api", "billing_api", "reseller_api", "activity_log_api", "s3_object_storage", "backup"]

# get the status page
status_page = 'https://status.ionos.cloud/'
http = urllib3.PoolManager()
response = http.request('GET', status_page)
soup = BeautifulSoup(response.data, 'html.parser')

# filter out relevant data
ionos_stati = soup.find_all(class_=['name', 'component-status'])

# print metric function
def print_prometheus_metric(metric_name, metric_result):
    print("# HELP " + metric_name + " ionos component status")
    print("# TYPE " + metric_name + " gauge")
    print("ionos_cloud_" + metric_name + " " + metric_result)


# iterate and parse results
current_component=None
current_subcomponent=None
# some components are double due to the html parsing (help text in html)
processed_metrics=[]
for line in ionos_stati:

    # remove html tags and extract text
    component = line.get_text()
    # lowercase, strip and replace unwanted characters
    component = component.lower().strip().replace(" ", "_").replace("/", "_")
    # replace components status with integers
    component = component.replace("operational", "0").replace("partialoutage", "1")

    # check if current line matches any main component
    if any(component_name in component for component_name in main_components):
        current_component=component

    # check if current line matches any of the sub components
    elif component in sub_components:
        current_subcomponent=component

    # line could be "cloud_support", which has no sub components
    elif current_component == "cloud_support":
        metric_name = current_component
        # check if metric was not already processed
        if metric_name not in processed_metrics:
            processed_metrics.append(metric_name)
            print_prometheus_metric(metric_name, component)

    # line has to be a status of the previous component
    elif current_component != None and current_subcomponent != None:
        metric_name = current_component + "_" + current_subcomponent
        # check if metric was not already processed
        if metric_name not in processed_metrics:
            processed_metrics.append(metric_name)
            print_prometheus_metric(metric_name, component)
